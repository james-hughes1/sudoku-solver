Timer unit: 1e-09 s

Total time: 0.000854678 s
File: /home/jhughes2712/projects/c1_assessment/jh2284/prof/scripts/check_valid_hard.py
Function: check_grid_valid at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           def check_grid_valid(grid: np.ndarray) -> bool:
     7                                               """!@brief Checks if grid represents part of a valid solution to a sudoku
     8                                               puzzle.
     9                                               @details Returns a boolean value indicating whether or not the grid has
    10                                               repeated digits in each row, column and 3x3 box.
    11                                               @param grid Sudoku grid stored as a np.ndarray.
    12                                               @return valid True if grid is valid, False otherwise.
    13                                               """
    14         1        872.0    872.0      0.1      valid = True
    15        10       3233.0    323.3      0.4      for element_idx in range(9):
    16         9     326108.0  36234.2     38.2          _, counts = np.unique(grid[element_idx, :], return_counts=True)
    17         9      87383.0   9709.2     10.2          if (counts[1:] > 1).any():
    18                                                       valid = False
    19         9     169667.0  18851.9     19.9          _, counts = np.unique(grid[:, element_idx], return_counts=True)
    20         9      31590.0   3510.0      3.7          if (counts[1:] > 1).any():
    21                                                       valid = False
    22        18     189299.0  10516.6     22.1          _, counts = np.unique(
    23        18       4970.0    276.1      0.6              grid[
    24        18       5284.0    293.6      0.6                  3 * (element_idx // 3) : 3 * (element_idx // 3) + 3,
    25         9       3551.0    394.6      0.4                  3 * (element_idx % 3) : 3 * (element_idx % 3) + 3,
    26                                                       ],
    27         9       1225.0    136.1      0.1              return_counts=True,
    28                                                   )
    29         9      31385.0   3487.2      3.7          if (counts[1:] > 1).any():
    30                                                       valid = False
    31         1        111.0    111.0      0.0      return valid
