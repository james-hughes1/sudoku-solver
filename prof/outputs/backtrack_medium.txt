Timer unit: 1e-09 s

Total time: 63.2972 s
File: /home/jhughes2712/projects/c1_assessment/jh2284/prof/scripts/backtrack_medium.py
Function: solve_backtrack at line 149

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   149                                           def solve_backtrack(grid: np.ndarray) -> np.ndarray:
   150                                               """!@brief Solves a sudoku using the backtracking method, using templates
   151                                               to filter the possible values first.
   152                                               @param grid Sudoku grid of clues stored as a np.ndarray.
   153                                               @return grid Sudoku grid with all cells containing digits 1-9, so that
   154                                               all sudoku rules are satisfied.
   155                                               """
   156                                               # Check if the start grid clues are valid
   157         1     648868.0 648868.0      0.0      if not check_grid_valid(grid):
   158                                                   print(
   159                                                       "Invalid starting grid, each digit can only appear "
   160                                                       "once in each row, column and 3x3 box."
   161                                                   )
   162                                                   return np.zeros((9, 9))
   163                                               else:
   164                                                   # Find set of valid templates and refine the set
   165         1 7063540135.0    7e+09     11.2          valid_templates_list = find_valid_templates(grid)
   166         2        6e+10    3e+10     87.7          grid, valid_templates_list = refine_valid_templates(
   167         1        187.0    187.0      0.0              grid, valid_templates_list
   168                                                   )
   169         1  699677362.0    7e+08      1.1          all_templates = list(generate_templates())
   170         1       1025.0   1025.0      0.0          solved = False
   171                                                   # Create nested list for candidate digits for each cell, from valid
   172                                                   # templates
   173         1      12134.0  12134.0      0.0          possible_digits_array = np.zeros((9, 9, 9))
   174         2     286087.0 143043.5      0.0          possible_digits_list = [
   175         1       1395.0   1395.0      0.0              deepcopy([[].copy() for _ in range(9)]) for _ in range(9)
   176                                                   ]
   177        10       1617.0    161.7      0.0          for digit_idx in range(9):
   178        18      26627.0   1479.3      0.0              for template_idx in valid_templates_list[digit_idx]:
   179         9      34625.0   3847.2      0.0                  possible_digits_array[digit_idx] += all_templates[template_idx]
   180        90      15097.0    167.7      0.0              for row_idx in range(9):
   181       810     130094.0    160.6      0.0                  for col_idx in range(9):
   182       729     374710.0    514.0      0.0                      if possible_digits_array[digit_idx][row_idx][col_idx] > 0:
   183       162      35341.0    218.2      0.0                          possible_digits_list[row_idx][col_idx].append(
   184        81      13068.0    161.3      0.0                              digit_idx + 1
   185                                                                   )
   186         2    1928758.0 964379.0      0.0          possible_digits_gens = [
   187                                                       [
   188                                                           (
   189                                                               possible_digits
   190                                                               for possible_digits in possible_digits_list[row_idx][
   191                                                                   col_idx
   192                                                               ]
   193                                                               + [0]
   194                                                           )
   195                                                           for col_idx in range(9)
   196                                                       ]
   197         1        321.0    321.0      0.0              for row_idx in range(9)
   198                                                   ]
   199         1      79093.0  79093.0      0.0          search_positions = np.vstack(np.where(grid == 0))
   200         1       1034.0   1034.0      0.0          num_search_positions = search_positions.shape[1]
   201                                                   # Don't search if the refinement of templates solves the sudoku, which
   202                                                   # happens often
   203         1        272.0    272.0      0.0          if num_search_positions == 0:
   204         1        169.0    169.0      0.0              solved = True
   205         1        163.0    163.0      0.0          search_idx = 0
   206         1        284.0    284.0      0.0          while not solved:
   207                                                       current_position = (
   208                                                           search_positions[0, search_idx],
   209                                                           search_positions[1, search_idx],
   210                                                       )
   211                                                       new_value = next(
   212                                                           possible_digits_gens[current_position[0]][current_position[1]]
   213                                                       )
   214                                                       grid[current_position] = new_value
   215                                                       # When you reach the maximum candidate digit, backtrack
   216                                                       if new_value == 0:
   217                                                           possible_digits_gens[current_position[0]][
   218                                                               current_position[1]
   219                                                           ] = (
   220                                                               possible_digits
   221                                                               for possible_digits in possible_digits_list[
   222                                                                   current_position[0]
   223                                                               ][current_position[1]]
   224                                                               + [0]
   225                                                           )
   226                                                           search_idx -= 1
   227                                                           assert search_idx >= 0
   228                                                       else:
   229                                                           # If current solution is valid, advance the search to the next
   230                                                           # cell
   231                                                           if check_grid_valid(grid):
   232                                                               if search_idx == num_search_positions - 1:
   233                                                                   solved = True
   234                                                               else:
   235                                                                   search_idx += 1
   236         1        113.0    113.0      0.0          return grid
