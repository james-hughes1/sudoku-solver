Timer unit: 1e-09 s

Total time: 2.04789 s
File: /home/jhughes2712/projects/c1_assessment/jh2284/prof/scripts/backtrack_medium.py
Function: solve_backtrack at line 144

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   144                                           def solve_backtrack(grid: np.ndarray) -> np.ndarray:
   145                                               """!@brief Solves a sudoku using the backtracking method, using templates
   146                                               to filter the possible values first.
   147                                               @param grid Sudoku grid of clues stored as a np.ndarray.
   148                                               @return grid Sudoku grid with all cells containing digits 1-9, so that
   149                                               all sudoku rules are satisfied.
   150                                               """
   151                                               # Check if the start grid clues are valid
   152         1     328497.0 328497.0      0.0      if not check_grid_valid(grid):
   153                                                   print(
   154                                                       "Invalid starting grid, each digit can only appear "
   155                                                       "once in each row, column and 3x3 box."
   156                                                   )
   157                                                   return np.zeros((9, 9))
   158                                               else:
   159                                                   # Find set of valid templates and refine the set
   160         1  196053092.0    2e+08      9.6          valid_templates_array = find_valid_templates(grid)
   161         2 1849534880.0    9e+08     90.3          grid, valid_templates_array = refine_valid_templates(
   162         1        168.0    168.0      0.0              grid, valid_templates_array
   163                                                   )
   164         1        351.0    351.0      0.0          solved = False
   165                                                   # Create nested list for candidate digits for each cell, from valid
   166                                                   # templates
   167         1       2886.0   2886.0      0.0          possible_digits_array = np.zeros((9, 9, 9))
   168         2     243897.0 121948.5      0.0          possible_digits_list = [
   169         1       1092.0   1092.0      0.0              deepcopy([[].copy() for _ in range(9)]) for _ in range(9)
   170                                                   ]
   171        10       1624.0    162.4      0.0          for digit_idx in range(9):
   172        18      27256.0   1514.2      0.0              template_array_digit = ALL_TEMPLATES[
   173         9     304105.0  33789.4      0.0                  np.where(valid_templates_array[digit_idx, :] == 1)[0], :, :
   174                                                       ]
   175        18      76955.0   4275.3      0.0              possible_digits_array[digit_idx] += np.sum(
   176         9       1403.0    155.9      0.0                  template_array_digit, axis=0
   177                                                       )
   178        90      16316.0    181.3      0.0              for row_idx in range(9):
   179       810     153428.0    189.4      0.0                  for col_idx in range(9):
   180       729     369367.0    506.7      0.0                      if possible_digits_array[digit_idx][row_idx][col_idx] > 0:
   181       162      37057.0    228.7      0.0                          possible_digits_list[row_idx][col_idx].append(
   182        81      11977.0    147.9      0.0                              digit_idx + 1
   183                                                                   )
   184         2     687012.0 343506.0      0.0          possible_digits_gens = [
   185                                                       [
   186                                                           (
   187                                                               possible_digits
   188                                                               for possible_digits in possible_digits_list[row_idx][
   189                                                                   col_idx
   190                                                               ]
   191                                                               + [0]
   192                                                           )
   193                                                           for col_idx in range(9)
   194                                                       ]
   195         1        270.0    270.0      0.0              for row_idx in range(9)
   196                                                   ]
   197         1      35974.0  35974.0      0.0          search_positions = np.vstack(np.where(grid == 0))
   198         1        626.0    626.0      0.0          num_search_positions = search_positions.shape[1]
   199                                                   # Don't search if the refinement of templates solves the sudoku, which
   200                                                   # happens often
   201         1        246.0    246.0      0.0          if num_search_positions == 0:
   202         1        186.0    186.0      0.0              solved = True
   203         1        168.0    168.0      0.0          search_idx = 0
   204         1        210.0    210.0      0.0          while not solved:
   205                                                       current_position = (
   206                                                           search_positions[0, search_idx],
   207                                                           search_positions[1, search_idx],
   208                                                       )
   209                                                       new_value = next(
   210                                                           possible_digits_gens[current_position[0]][current_position[1]]
   211                                                       )
   212                                                       grid[current_position] = new_value
   213                                                       # When you reach the maximum candidate digit, backtrack
   214                                                       if new_value == 0:
   215                                                           possible_digits_gens[current_position[0]][
   216                                                               current_position[1]
   217                                                           ] = (
   218                                                               possible_digits
   219                                                               for possible_digits in possible_digits_list[
   220                                                                   current_position[0]
   221                                                               ][current_position[1]]
   222                                                               + [0]
   223                                                           )
   224                                                           search_idx -= 1
   225                                                           assert search_idx >= 0
   226                                                       else:
   227                                                           # If current solution is valid, advance the search to the next
   228                                                           # cell
   229                                                           if check_grid_valid(grid):
   230                                                               if search_idx == num_search_positions - 1:
   231                                                                   solved = True
   232                                                               else:
   233                                                                   search_idx += 1
   234         1        195.0    195.0      0.0          return grid
