Timer unit: 1e-09 s

Total time: 0.211242 s
File: /home/jhughes2712/projects/c1_assessment/jh2284/prof/scripts/find_valid_templates_hard.py
Function: find_valid_templates at line 72

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    72                                           def find_valid_templates(
    73                                               grid: np.ndarray, valid_templates_array: np.ndarray = None
    74                                           ) -> np.ndarray:
    75                                               """!@brief Produce a list of templates applicable to a sudoku grid.
    76                                               @details Given a starting grid of clues, this function iterates through
    77                                               all possible templates, and - for each digit - stores the subset of
    78                                               templates that are valid given the clues.
    79                                               @param grid Sudoku grid stored as a np.ndarray.
    80                                               @param valid_templates_array Optional, allows search through a subset of
    81                                               all possible templates.
    82                                               @return valid_templates_array The subsets of valid templates for each
    83                                               digit.
    84                                               """
    85         1        854.0    854.0      0.0      if valid_templates_array is None:
    86         1     434372.0 434372.0      0.2          valid_templates_array = np.ones((9, 46656))
    87        10      14626.0   1462.6      0.0      for digit in range(1, 10):
    88         9     219661.0  24406.8      0.1          digit_grid = 1 * (grid == digit)
    89         9  106508753.0    1e+07     50.4          digit_valid_grid = np.any(ALL_TEMPLATES - digit_grid < 0, axis=(1, 2))
    90         9     219162.0  24351.3      0.1          other_digit_grid = 1 * ((grid - (digit * digit_grid)) > 0)
    91        18    6888710.0 382706.1      3.3          other_digit_valid_grid = np.any(
    92         9   95756873.0    1e+07     45.3              ALL_TEMPLATES * other_digit_grid == 1, axis=(1, 2)
    93                                                   )
    94         9     750522.0  83391.3      0.4          eliminate_array = (
    95         9     145183.0  16131.4      0.1              digit_valid_grid | other_digit_valid_grid
    96         9      34174.0   3797.1      0.0          ) * valid_templates_array[digit - 1, :]
    97         9     268275.0  29808.3      0.1          valid_templates_array[digit - 1, :] -= eliminate_array
    98         1        584.0    584.0      0.0      return valid_templates_array
